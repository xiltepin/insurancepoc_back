generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Compensation {
  compensationid   Int      @id(map: "compensation_pkey") @default(autoincrement())
  vehicleid        Int
  claimdate        DateTime @db.Date
  claimamount      Decimal  @db.Decimal(15, 2)
  compensationtype String?  @db.VarChar(50)
  description      String?
  Vehicle          Vehicle  @relation(fields: [vehicleid], references: [vehicleid], onDelete: Cascade, onUpdate: NoAction, map: "compensation_vehicleid_fkey")

  @@map("compensation")
}

model CustomerInfo {
  customer_id   Int       @id(map: "customerinfo_pkey") @default(autoincrement())
  first_name    String    @db.VarChar(50)
  last_name     String    @db.VarChar(50)
  date_of_birth DateTime  @db.Date
  address       String?
  phone_number  String?   @db.VarChar(15)
  email         String?   @unique(map: "customerinfo_email_key") @db.VarChar(100)
  vehicles      Vehicle[] @relation("CustomerVehicles")
  policies      Policy[]  // Relación con la tabla de Policy

  @@map("customer_info") // Nombre corregido de la tabla en PostgreSQL
}

model Vehicle {
  vehicleid    Int            @id(map: "vehicle_pkey") @default(autoincrement())
  customerid   Int
  licenseplate String         @unique(map: "vehicle_licenseplate_key") @db.VarChar(15)
  vin          String         @unique(map: "vehicle_vin_key") @db.VarChar(17)
  make         String?        @db.VarChar(50)
  model        String?        @db.VarChar(50)
  year         Int?
  color        String?        @db.VarChar(30)
  Compensation Compensation[]
  CustomerInfo CustomerInfo   @relation("CustomerVehicles", fields: [customerid], references: [customer_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("vehicle") // Asegúrate de que el nombre de la tabla coincide con PostgreSQL
}

model Policy {
  policy_id       Int            @id @default(autoincrement())
  startdate       DateTime
  enddate         DateTime
  contract_status ContractStatus
  second_vehicle  Boolean
  premium         Float
  customer        CustomerInfo?  @relation(fields: [customer_id], references: [customer_id])
  customer_id     Int?

  @@map("policy") // Nombre pluralizado en PostgreSQL
}

enum ContractStatus {
  CURRENTLY_ENROLLED_1_YEAR
  FIRST_TIME
  CURRENTLY_ENROLLED_OTHER
  EXPIRED
  CURRENTLY_ENROLLED_WITH_CLAIM
}
