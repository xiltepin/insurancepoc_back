generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Compensation {
  compensationid   Int      @id(map: "compensation_pkey") @default(autoincrement())
  vehicleid        Int
  claimdate        DateTime @db.Date
  claimamount      Decimal  @db.Decimal(15, 2)
  compensationtype String?  @db.VarChar(50)
  description      String?
  Vehicle          Vehicle  @relation(fields: [vehicleid], references: [vehicleid], onDelete: Cascade, onUpdate: NoAction, map: "compensation_vehicleid_fkey")
}

model CustomerInfo {
  customer_id   Int            @id(map: "customerinfo_pkey") @default(autoincrement())
  first_name    String         @db.VarChar(50)
  last_name     String         @db.VarChar(50)
  date_of_birth DateTime       @db.Date
  address       String?
  phone_number  String?        @db.VarChar(15)
  email         String?        @unique(map: "customerinfo_email_key") @db.VarChar(100)
  Vehicles      Vehicle[]      @relation("CustomerVehicles") // Updated relation name
}

model Vehicle {
  vehicleid      Int            @id(map: "vehicle_pkey") @default(autoincrement())
  customerid     Int            // Changed from policyholderid to customerid
  licenseplate   String         @unique(map: "vehicle_licenseplate_key") @db.VarChar(15)
  vin            String         @unique(map: "vehicle_vin_key") @db.VarChar(17)
  make           String?        @db.VarChar(50)
  model          String?        @db.VarChar(50)
  year           Int?
  color          String?        @db.VarChar(30)
  Compensation   Compensation[]
  CustomerInfo   CustomerInfo   @relation("CustomerVehicles", fields: [customerid], references: [customer_id], onDelete: Cascade, onUpdate: NoAction) // Updated relation name
}
